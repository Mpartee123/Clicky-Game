{"version":3,"sources":["components/ImageCard/ImageCard.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","console","log","react_default","a","createElement","className","alt","name","src","image","onClick","clicked","gameOver","removeFriend","id","Wrapper","children","Title","App","state","friends","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","newFriends","_this","forEach","friend","newFriend","push","setState","alert","_this2","this","map","ImageCard_ImageCard","key","components_Wrapper","components_Title","renderCards","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8hCA0BeA,MArBf,SAAmBC,GAWf,OAVAC,QAAQC,IAAIF,GAWRG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,MAAOC,QAAS,WAVtDX,EAAMY,QAELZ,EAAMa,WAENb,EAAMc,aAAad,EAAMe,KAMoDT,UAAU,oBCZpFU,MAJf,SAAiBhB,GACf,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWN,EAAMiB,iBCG1BC,MAJf,SAAelB,GACb,OAAOG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASN,EAAMiB,kBC0FvBE,6MApFXC,MAAQ,CACJC,aAGHC,QAAQ,SAACC,GAKN,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGzB,OAAOD,KAGXT,aAAe,SAAAC,GAKX,IAAIgB,EAAa,GACjBC,EAAKZ,MAAMC,QAAQY,QAAQ,SAAAC,GACvB,IAAItB,GAAU,EACXsB,EAAOnB,KAAOA,IAAyB,IAAnBmB,EAAOtB,UAE1BA,GAAU,GAEd,IAAIuB,EAAY,CACZ3B,KAAM0B,EAAO1B,KACbE,MAAOwB,EAAOxB,MACdK,GAAImB,EAAOnB,GACXH,WAGJmB,EAAWK,KAAKD,KAGhBH,EAAKV,QAAQS,GAEjBC,EAAKK,SAAS,CACVhB,QAASU,IAGb9B,QAAQC,IAAI,gDAAgDmB,8EAI5DiB,MAAM,mDAGG,IAAAC,EAAAC,KACT,OAAOA,KAAKpB,MAAMC,QAAQoB,IAAI,SAAAP,GAAM,OAChC/B,EAAAC,EAAAC,cAACqC,EAAD,CACI5B,aAAcyB,EAAKzB,aACnBC,GAAImB,EAAOnB,GACX4B,IAAKT,EAAOnB,GACZP,KAAM0B,EAAO1B,KACbE,MAAOwB,EAAOxB,MACdE,QAAiBsB,EAAOtB,QACxBC,SAAU0B,EAAK1B,8CAOvB,OACIV,EAAAC,EAAAC,cAACuC,EAAD,KACIzC,EAAAC,EAAAC,cAACwC,EAAD,+BACCL,KAAKM,sBAhFJC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88c06214.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction ImageCard(props) {\n    console.log(props);\n    function checkForLoss()\n    {\n        if(props.clicked)\n        {\n            props.gameOver();\n        } else {\n            props.removeFriend(props.id)\n        }\n    }\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} onClick={() => {checkForLoss()}} className=\"remove\" />\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./images.json\";\n\n\n\nclass App extends Component {\n    // Setting this.state.friends to the friends json array\n    state = {\n        friends\n    };\n\n     shuffle=(array)=> {\n\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    };\n\n    removeFriend = id => {\n        //add score to state above, get score from state, add one to it, then use it to setstate below\n\n        // Filter this.state.friends for friends with an id not equal to the id being removed\n        //const friends = this.state.friends.filter(friend => friend.id !== id);\n        let newFriends = [];\n        this.state.friends.forEach(friend => {\n            let clicked = false;\n            if(friend.id === id || friend.clicked === true)\n            {\n                clicked = true\n            }\n            let newFriend = {\n                name: friend.name,\n                image: friend.image,\n                id: friend.id,\n                clicked\n            }\n\n            newFriends.push(newFriend);\n        });\n        //Below this comment, shuffle the newFriends array\n            this.shuffle(newFriends);\n        // Set this.state.friends equal to the new friends array\n        this.setState({\n            friends: newFriends\n            //score\n        });\n        console.log('remove friend ran and this is the info passed',friends);\n    };\n\n    gameOver(){\n        alert(\"You lose.\");\n    }\n\n    renderCards(){\n        return this.state.friends.map(friend => (\n            <ImageCard\n                removeFriend={this.removeFriend}\n                id={friend.id}\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                clicked={null || friend.clicked}\n                gameOver={this.gameOver}\n            />\n        ))\n    }\n\n    // Map over this.state.friends and render a FriendCard component for each friend object\n    render() {\n        return (\n            <Wrapper>\n                <Title>Residents of woodcrest</Title>\n                {this.renderCards()}\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}